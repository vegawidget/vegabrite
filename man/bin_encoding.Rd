% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/zzz_autogen_api.R
\name{bin_encoding}
\alias{bin_encoding}
\alias{vl_bin_angle}
\alias{vl_bin_color}
\alias{vl_bin_description}
\alias{vl_bin_detail}
\alias{vl_bin_fill}
\alias{vl_bin_fillOpacity}
\alias{vl_bin_href}
\alias{vl_bin_key}
\alias{vl_bin_latitude}
\alias{vl_bin_latitude2}
\alias{vl_bin_longitude}
\alias{vl_bin_longitude2}
\alias{vl_bin_opacity}
\alias{vl_bin_order}
\alias{vl_bin_radius}
\alias{vl_bin_radius2}
\alias{vl_bin_shape}
\alias{vl_bin_size}
\alias{vl_bin_stroke}
\alias{vl_bin_strokeDash}
\alias{vl_bin_strokeOpacity}
\alias{vl_bin_strokeWidth}
\alias{vl_bin_text}
\alias{vl_bin_theta}
\alias{vl_bin_theta2}
\alias{vl_bin_tooltip}
\alias{vl_bin_url}
\alias{vl_bin_x}
\alias{vl_bin_x2}
\alias{vl_bin_xError}
\alias{vl_bin_xError2}
\alias{vl_bin_xOffset}
\alias{vl_bin_y}
\alias{vl_bin_y2}
\alias{vl_bin_yError}
\alias{vl_bin_yError2}
\alias{vl_bin_yOffset}
\alias{vl_bin_facet}
\alias{vl_bin_row}
\alias{vl_bin_column}
\title{Add bin to encoding}
\usage{
vl_bin_angle(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_color(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_description(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_detail(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_fill(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_fillOpacity(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_href(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_key(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_latitude(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_latitude2(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_longitude(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_longitude2(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_opacity(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_order(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_radius(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_radius2(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_shape(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_size(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_stroke(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_strokeDash(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_strokeOpacity(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_strokeWidth(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_text(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_theta(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_theta2(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_tooltip(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_url(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_x(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_x2(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_xError(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_xError2(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_xOffset(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_y(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_y2(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_yError(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_yError2(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_yOffset(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_facet(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_row(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)

vl_bin_column(
  spec,
  anchor = NULL,
  base = NULL,
  binned = NULL,
  divide = NULL,
  extent = NULL,
  maxbins = NULL,
  minstep = NULL,
  nice = NULL,
  step = NULL,
  steps = NULL,
  .object = NULL
)
}
\arguments{
\item{spec}{An input vega-lite spec}

\item{anchor}{A value in the binned domain at which to anchor the bins, shifting the bin
boundaries if necessary to ensure that a boundary aligns with the anchor value.

\strong{Default value:} the minimum bin extent value}

\item{base}{The number base to use for automatic bin determination (default is base 10).

\strong{Default value:} \code{10}}

\item{binned}{When set to \code{true}, Vega-Lite treats the input data as already binned.}

\item{divide}{Scale factors indicating allowable subdivisions. The default value is [5, 2],
which indicates that for base 10 numbers (the default base), the method may
consider dividing bin sizes by 5 and/or 2. For example, for an initial step
size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (=
10/(5*2)) might also satisfy the given constraints.

\strong{Default value:} \verb{[5, 2]}}

\item{extent}{A two-element (\verb{[min, max]}) array indicating the range of desired bin values.}

\item{maxbins}{Maximum number of bins.

\strong{Default value:} \code{6} for \code{row}, \code{column} and \code{shape} channels; \code{10} for other
channels}

\item{minstep}{A minimum allowable step size (particularly useful for integer values).}

\item{nice}{If true, attempts to make the bin boundaries use human-friendly boundaries, such
as multiples of ten.

\strong{Default value:} \code{true}}

\item{step}{An exact step size to use between bins.

\strong{Note:} If provided, options such as maxbins will be ignored.}

\item{steps}{An array of allowable step sizes to choose from.}

\item{.object}{Directly input an object, rather than creating one via the other arguments. Should not be used in conjunction with the other arguments other than \code{spec}. Objects can be of type: BinParams}
}
\value{
A modified Vega-Lite Spec
}
\description{
Add bin parameters to an encoding
}
